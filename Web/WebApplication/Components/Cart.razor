@inject IJSRuntime JSRuntime;
@inject Task<string> getURLTask;

@if (NFC && !permission) {
	<button @onclick="NFCPermission">
		Start Scanning
	</button>
}
else if (Items == null) {
	<p>
		<em>Please Scan Something</em>
	</p>
}
else {
	<p>Total Price @Items.Sum(x => x.Quantity * x.SellPrice)</p>
	<div class="list-group overflow-auto" style="height: 60vh">
		@foreach (var item in Items) {
			<a href="#" class="list-group-item list-group-item-action flex-column align-items-start">
				<div class="d-flex w-100 justify-content-between">
					<p class="mb-1">@item.Name</p>
					<small>Price @item.SellPrice</small>
					<small>Quantity @item.Quantity</small>
					<small>Total Price @(item.Quantity * item.SellPrice)</small>
				</div>
			</a>
		}
	</div>
}

@code {

	[Parameter]
	public List<Item> Items { get; set; }

	[Parameter]
	public Action<List<Item>> callBack { get; set; }

	[Parameter]
	public bool NFC { get; set; }

	private bool permission;
	private static Action<Guid> _action;

	protected override void OnInitialized() {
		_action = UpdateMessage;
		if (NFC)
			NFCPermission();
	}

	public async void UpdateMessage(Guid id) {

		//The checkout card has been scanned
		if (Guid.Parse("11111111-1111-1111-1111-111111111111") == id) {
			var purchase = new List<Business.Models.Inventory>();


			foreach (var item in Items) {
				purchase.Add(new Business.Models.Inventory() {
					ItemId = item.ItemId,
					Monies = item.SellPrice,
					Quantity = item.Quantity,
				});
			}

			var response = await Utils.PostAsync($"{await getURLTask}api/Checkout", purchase);

			Items = new List<Item>();

		}
		else { //They are scanning an item
			var response = await Utils.GetAsync($"{await getURLTask}api/Items/{id}");
			if (response.IsSuccessStatusCode) {
				var _item = JsonConvert.DeserializeObject<Business.Models.Item>(await response.Content.ReadAsStringAsync());

				Items ??= new List<Item>();

				//If we already have the item just increase the quantity otherwise add a new item
				if (Items.FirstOrDefault(x => x.ItemId == id) != null)
					Items.First(x => x.ItemId == id).Quantity++;
				else {
					var item = new Item {
						ItemId = _item.ItemId,
						Name = _item.Name,
						Description = _item.Description,
						BuyPrice = _item.BuyPrice,
						SellPrice = _item.SellPrice,
						ShelfLife = _item.ShelfLife,
						Quantity = 1
					};

					Items.Add(item);
				}
			}
		}



		StateHasChanged();

		callBack.Invoke(Items);
	}

	private async void NFCPermission() {
		permission = await JSRuntime.InvokeAsync<bool>("NFCScan");

		StateHasChanged();
	}

	[JSInvokable]
	public static void UpdateMessageCaller(string data) {
		var id = Guid.Parse(data);
		_action.Invoke(id);
	}

	public void Clear() {
		Items = null;
		StateHasChanged();
	}


	public class Item : Business.Models.Item {
		public int Quantity { get; set; }
	}
}