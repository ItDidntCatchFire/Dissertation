@page "/Finances"
@inject Task<string> getURLTask
@attribute [Authorize]

<h1>Finances</h1>

<div class="container my-4" style="overflow:hidden; display:flex; flex-direction:row">
		<div style="flex-grow:1">
			<p>Overall</p>
			<p>Total Cost: @totalCost</p>
			<p>Total Revenue: @totalRevenue</p>
		</div>
		<div style="flex-grow:1">
			<p>Past Week</p>
			<p>Total Cost: @totalWeekCost</p>
			<p>Total Revenue: @totalWeekRevenue</p>
		</div>
		<div style="flex-grow:1">
			<p>Past Month</p>
			<p>Total Cost: @totalMonthCost</p>
			<p>Total Revenue: @totalMonthRevenue</p>
		</div>
		<div style="flex-grow:1">
			<p>Past Year</p>
			<p>Total Cost: @totalYearCost</p>
			<p>Total Revenue: @totalYearRevenue</p>
		</div>
	</div>

@if (inventories == null) {
	<p>
		<em>Loading...</em>
	</p>
}
else {
	<div class="container my-4">
		<!--Accordion wrapper-->
		<div class="accordion md-accordion accordion-blocks" id="accordionEx24" role="tablist" aria-multiselectable="true">
			@foreach (var nameGroup in query) {
				@* Accordion *@
				<div class="card">

					@* Header *@
					<div class="card-header" role="tab" id="heading@(nameGroup.Key)">
						<!-- Heading -->
						<a data-toggle="collapse" data-parent="#accordionEx24" href="#collapse@(nameGroup.Key)" aria-expanded="true" aria-controls="collapse@(nameGroup.Key)">
							<h5 class="mt-1 mb-0">
								<span>@nameGroup.Key</span>
								<span style="float:right">£@inventories.Where(x => x.InventoryId == nameGroup.Key).Sum(x => (x.Monies * x.Quantity)).ToString("0.00")</span>
								<i class="fas fa-angle-down rotate-icon"></i>
							</h5>
						</a>
					</div>

					<!-- Card body -->
					<div id="collapse@(nameGroup.Key)" class="collapse hide" role="tabpanel" aria-labelledby="heading@(nameGroup.Key)" data-parent="#accordionEx24">
						<div class="card-body">

							<!-- Table responsive wrapper -->
							<div class="table-responsive mx-3">
								<!--Table-->
								<table class="table table-hover mb-0">
									<!--Table head-->
									<thead>
										<tr>
											<th class="th-lg">
												<a>Id<i class="fas fa-sort ml-1"></i></a>
											</th>
											<th class="th-lg">
												<a>Export<i class="fas fa-sort ml-1"></i></a>
											</th>
											<th class="th-lg">
												<a>Quantity<i class="fas fa-sort ml-1"></i></a>
											</th>
											<th class="th-lg">
												<a>Total<i class="fas fa-sort ml-1"></i></a>
											</th>
											<th></th>
										</tr>
									</thead>
									<!--Table head-->
									<!--Table body-->
									<tbody>
										@foreach (var inventory in nameGroup) {
											<tr>
												<td>@(items.First(x => x.ItemId == inventory.ItemId).Name ?? inventory.ItemId.ToString())</td>
												<td>@(inventory.Export ? "Yes" : "No")</td>
												<td>@inventory.Quantity</td>
												<td>£@inventory.Monies.ToString("0.00")</td>
												<td>
													<a>
														<i class="fas fa-info mx-1" data-toggle="tooltip" data-placement="top"
														   title="Tooltip on top">
														</i>
													</a>
													<a>
														<i class="fas fa-pen-square mx-1"></i>
													</a>
													<a>
														<i class="fas fa-times mx-1"></i>
													</a>
												</td>
											</tr>
										}
									</tbody>
									<!--Table body-->
								</table>
								<!--Table-->
							</div>
							<!-- Table responsive wrapper -->

						</div>
					</div>

				</div>
			}
		</div>
	</div>
}

@code {
	private IEnumerable<Business.Models.Inventory>
		inventories;
	private IEnumerable<Business.Models.Item>
		items;
	private IOrderedEnumerable<IGrouping<Guid, Business.Models.Inventory>> query;

	private decimal totalRevenue, totalWeekRevenue, totalMonthRevenue, totalYearRevenue;
	private decimal totalCost, totalWeekCost, totalMonthCost, totalYearCost;

	protected override async Task OnInitializedAsync() {

		var url = await getURLTask;
		var itemResponse = await Utils.GetAsync($"{url}api/Items/List");
		var inventoryResponse = await Utils.GetAsync($"{url}api/Inventory/List");

		var totalWeekRevenueResponse = await Utils.GetAsync($"{url}api/Transaction/Revenue?dateFrom={DateTime.Now.AddDays(-7).ToString("yyyy-MM-ddTHH:mm:ss")}&dateTo={DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss")}");
		var totalWeekCostResponse = await Utils.GetAsync($"{url}api/Transaction/Cost?dateFrom={DateTime.Now.AddDays(-7).ToString("yyyy-MM-ddTHH:mm:ss")}&dateTo={DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss")}");
		var totalMonthRevenueResponse = await Utils.GetAsync($"{url}api/Transaction/Revenue?dateFrom={DateTime.Now.AddMonths(-1).ToString("yyyy-MM-ddTHH:mm:ss")}&dateTo={DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss")}");
		var totalMonthCostResponse = await Utils.GetAsync($"{url}api/Transaction/Cost?dateFrom={DateTime.Now.AddMonths(-1).ToString("yyyy-MM-ddTHH:mm:ss")}&dateTo={DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss")}");
		var totalYearRevenueResponse = await Utils.GetAsync($"{url}api/Transaction/Revenue?dateFrom={DateTime.Now.AddYears(-1).ToString("yyyy-MM-ddTHH:mm:ss")}&dateTo={DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss")}");
		var totalYearCostResponse = await Utils.GetAsync($"{url}api/Transaction/Cost?dateFrom={DateTime.Now.AddYears(-1).ToString("yyyy-MM-ddTHH:mm:ss")}&dateTo={DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss")}");
		var totalRevenueResponse = await Utils.GetAsync($"{url}api/Transaction/Revenue?dateFrom={DateTime.MinValue.ToString("yyyy-MM-ddTHH:mm:ss")}&dateTo={DateTime.MaxValue.ToString("yyyy-MM-ddTHH:mm:ss")}");
		var totalCostResponse = await Utils.GetAsync($"{url}api/Transaction/Cost?dateFrom={DateTime.MinValue.ToString("yyyy-MM-ddTHH:mm:ss")}&dateTo={DateTime.MaxValue.ToString("yyyy-MM-ddTHH:mm:ss")}");


		if (totalRevenueResponse.IsSuccessStatusCode)
			totalRevenue = JsonConvert.DeserializeObject<decimal>(await totalRevenueResponse.Content.ReadAsStringAsync());

		if (totalCostResponse.IsSuccessStatusCode)
			totalCost = JsonConvert.DeserializeObject<decimal>(await totalCostResponse.Content.ReadAsStringAsync());

		if (totalWeekRevenueResponse.IsSuccessStatusCode)
			totalWeekRevenue = JsonConvert.DeserializeObject<decimal>(await totalWeekRevenueResponse.Content.ReadAsStringAsync());

		if (totalWeekCostResponse.IsSuccessStatusCode)
			totalWeekCost = JsonConvert.DeserializeObject<decimal>(await totalWeekCostResponse.Content.ReadAsStringAsync());

		if (totalMonthRevenueResponse.IsSuccessStatusCode)
			totalMonthRevenue = JsonConvert.DeserializeObject<decimal>(await totalMonthRevenueResponse.Content.ReadAsStringAsync());

		if (totalMonthCostResponse.IsSuccessStatusCode)
			totalMonthCost = JsonConvert.DeserializeObject<decimal>(await totalMonthCostResponse.Content.ReadAsStringAsync());

		if (totalYearRevenueResponse.IsSuccessStatusCode)
			totalYearRevenue = JsonConvert.DeserializeObject<decimal>(await totalYearRevenueResponse.Content.ReadAsStringAsync());

		if (totalYearCostResponse.IsSuccessStatusCode)
			totalYearCost = JsonConvert.DeserializeObject<decimal>(await totalYearCostResponse.Content.ReadAsStringAsync());

		items = itemResponse.IsSuccessStatusCode ? JsonConvert.DeserializeObject<IEnumerable<Business.Models.Item>>(await itemResponse.Content.ReadAsStringAsync()) : new List<Business.Models.Item>();

		if (inventoryResponse.IsSuccessStatusCode) {
			inventories = JsonConvert.DeserializeObject<IEnumerable<Business.Models.Inventory>>(await inventoryResponse.Content.ReadAsStringAsync());
			query = from inventory in inventories
					group inventory by inventory.InventoryId
				into newGroup
					orderby newGroup.Key
					select newGroup;
		}
		else
		{
			inventories = new List<Business.Models.Inventory>();
		}
	}
}
