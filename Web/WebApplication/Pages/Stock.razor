@page "/Stock"
@inject IJSRuntime JSRuntime
@inject Task<string> getURLTask
@attribute [Authorize]

@if (inventory == null) {
	<p>
		<em>Loading...</em>
	</p>
}
else {
	<h1>Stock</h1>
	<div class="container my-4">
		<table>
			<tbody>
				<tr>
					<td><b>Name</b></td>
					<td><b>Quantity</b></td>
				</tr>
				@foreach (var inven in inventory) {
					<tr>
						<td style="text-align:center">@items.First(x => x.ItemId == @inven.ItemId).Name</td>
						<td style="text-align:center">@inven.Quantity</td>
					</tr>
				}
			</tbody>
		</table>
	</div>

}

@code {
	private List<Business.Models.Inventory> inventory;
	private List<Business.Models.Item> items;

	protected override async Task OnInitializedAsync() {

		var inventoryResponse = await Utils.GetAsync($"{await getURLTask}api/Inventory/Stock");
		var itemResponse = await Utils.GetAsync($"{await getURLTask}api/Items/List");

		if (inventoryResponse.IsSuccessStatusCode)
			inventory = JsonConvert.DeserializeObject<List<Business.Models.Inventory>>(await inventoryResponse.Content.ReadAsStringAsync());

		if (itemResponse.IsSuccessStatusCode)
			items = JsonConvert.DeserializeObject<List<Business.Models.Item>>(await itemResponse.Content.ReadAsStringAsync());
	}
}
