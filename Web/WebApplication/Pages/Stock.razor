@page "/Stock"
@inject IJSRuntime JSRuntime
@inject Task<string> getURLTask
@attribute [Authorize]

<h1>Stock</h1>

<EditForm Model="@inventory">
		<div class="form-group row">
			<label for="inputName" class="col-sm-2 col-form-label">Name</label>
			<div class="col-sm-10">
				<select id="items" @bind="inventory.ItemId">
					@if (items != null)
					{
						<option value="@Guid.Empty"></option>
						foreach (var item in items)
						{
							<option value="@item.ItemId">@item.Name</option>
						}
					}
				</select>
			</div>
			@inventory.ItemId
		</div>
		<div class="form-group row">
			<label for="inputShelfLife" class="col-sm-2 col-form-label">Quantity</label>
		<div class="col-sm-10">
			<InputNumber class="form-control" id="inputShelfLife" placeholder="Enter Shelf life" min="0" @bind-Value="@(inventory.Quantity)"/>
		</div>
	</div>
	<button class="btn btn-primary" disabled="@(inventory.ItemId == Guid.Empty)" @onclick="Add">Add Stock</button>
	<button class="btn btn-primary" @onclick="ClearIndex">Clear</button>
</EditForm>
	<br />
		@message
	<br />

@if (inventories == null) {
	<p>
		<em>Loading...</em>
	</p>
}
else {
	<div class="container my-4">
		<table class="table">
			<thead>
			<tr>
				<th>Name</th>
				<th>Quantity</th>
			</tr>
			</thead>
			<tbody>
			@foreach (var inven in inventories)
			{
				<tr>
					<td style="text-align:center">@items.First(x => x.ItemId == @inven.ItemId).Name</td>
					<td style="text-align:center">@inven.Quantity</td>
				</tr>
			}
			</tbody>
		</table>
	</div>

}

@code {
	private List<Business.Models.Inventory> inventories;
	private List<Business.Models.Item> items;
	private Business.Models.Inventory inventory = new Business.Models.Inventory();
	
	private string message = "";
	
	protected override async Task OnInitializedAsync() {

		var inventoryResponse = await Utils.GetAsync($"{await getURLTask}api/Inventory/Stock");
		var itemResponse = await Utils.GetAsync($"{await getURLTask}api/Items/List");

		inventories = inventoryResponse.IsSuccessStatusCode ? JsonConvert.DeserializeObject<List<Business.Models.Inventory>>(await inventoryResponse.Content.ReadAsStringAsync()) : new List<Business.Models.Inventory>();
		
		items = itemResponse.IsSuccessStatusCode ? JsonConvert.DeserializeObject<List<Business.Models.Item>>(await itemResponse.Content.ReadAsStringAsync()) : new List<Business.Models.Item>();
	}

	private async Task Add()
	{
		message = "";
		
		inventory.Export = false;
		inventory.Monies = items.First(x => x.ItemId == inventory.ItemId).BuyPrice;
		inventory.Time = DateTime.Now;
		
		 var response = await Utils.PostAsync($"{await getURLTask}api/inventory",new List<Business.Models.Inventory>()
		 {
			 inventory
		 });
		
		 if (response.IsSuccessStatusCode)
		 {
		 	var inventoryResponse = await Utils.GetAsync($"{await getURLTask}api/Inventory/Stock");
		 	inventories = inventoryResponse.IsSuccessStatusCode ? JsonConvert.DeserializeObject<List<Business.Models.Inventory>>(await inventoryResponse.Content.ReadAsStringAsync()) : new List<Business.Models.Inventory>();
		 	ClearIndex();
		 }
		
	}

	private void ClearIndex() {
		message = "";
		inventory = new Business.Models.Inventory();
		StateHasChanged();
	}
}
