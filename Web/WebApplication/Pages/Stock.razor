@page "/Stock"
@inject IJSRuntime JSRuntime
@inject Task<string> getURLTask
@attribute [Authorize]

<h1>Stock</h1>

@if (inventory == null) {
	<p>
		<em>Loading...</em>
	</p>
}
else {
	<div class="container my-4">
		<table class="table">
			<thead>
			<tr>
				<th>Name</th>
				<th>Quantity</th>
			</tr>
			</thead>
			<tbody>
			@foreach (var inven in inventory)
			{
				<tr>
					<td style="text-align:center">@items.First(x => x.ItemId == @inven.ItemId).Name</td>
					<td style="text-align:center">@inven.Quantity</td>
				</tr>
			}
			</tbody>
		</table>
	</div>

}

@code {
	private List<Business.Models.Inventory> inventory;
	private List<Business.Models.Item> items;

	protected override async Task OnInitializedAsync() {

		var inventoryResponse = await Utils.GetAsync($"{await getURLTask}api/Inventory/Stock");
		var itemResponse = await Utils.GetAsync($"{await getURLTask}api/Items/List");

		inventory = inventoryResponse.IsSuccessStatusCode ? JsonConvert.DeserializeObject<List<Business.Models.Inventory>>(await inventoryResponse.Content.ReadAsStringAsync()) : new List<Business.Models.Inventory>();
		
		items = itemResponse.IsSuccessStatusCode ? JsonConvert.DeserializeObject<List<Business.Models.Item>>(await itemResponse.Content.ReadAsStringAsync()) : new List<Business.Models.Item>();
	}
}
