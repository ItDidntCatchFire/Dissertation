@page "/Export"
@using System.Text
@inject Task<string> getURLTask
@inject IJSRuntime JSRuntime;
@attribute [Authorize]

<h2>Export</h2>
<p>Inventory</p>
<button class="btn btn-primary" @onclick="@(() => { Download("api/Inventory/ExportJSON", $"Inventory-{DateTime.Now:MM/dd/yyyy HH:mm:ss}.json"); })">Export JSON</button>
<button class="btn btn-primary" @onclick="@(() => { Download("api/Inventory/ExportXML", $"Inventory-{DateTime.Now:MM/dd/yyyy HH:mm:ss}.xml"); })">Export XML</button>
<p>Items</p>
<button class="btn btn-primary" @onclick="@(() => { Download("api/Items/ExportJSON", $"Items-{DateTime.Now:MM/dd/yyyy HH:mm:ss}.json"); })">Export JSON</button>
<button class="btn btn-primary" @onclick="@(() => { Download("api/Items/ExportXML", $"Items-{DateTime.Now:MM/dd/yyyy HH:mm:ss}.xml"); })">Export XML</button>

<h2>Import</h2>
<label for="fileUpload">Inventory JSON:</label>
<input type="file" id="fileUpload" accept=".json" @onchange="@(() => { UploadFile("ImportJSON");})" />
<p>@message</p>

@code {
	private static Action<string, string> _action;
	private string message = "";
	protected override void OnInitialized() {
		_action = import;
	}

	private async void Download(string path, string name) {
		var response = await Utils.GetAsync((await getURLTask) + path);
		if (response.IsSuccessStatusCode) {
			var buffer = Encoding.UTF8.GetBytes(await response.Content.ReadAsStringAsync());
			JSRuntime.InvokeAsync<object>(
			"saveAsFile",
				name,
			   Convert.ToBase64String(buffer));
		}
	}

	private async void UploadFile(string type)
		=> await JSRuntime.InvokeAsync<bool>("readUploadedFileAsText", "fileUpload");

	[JSInvokable]
	public static void ImportJSResponse(string _data, string type)
	=> _action.Invoke(_data, type);

	private async void import(string _data, string type) {
		var response = await Utils.PostAsync($"{await getURLTask}api/Inventory/Import{type}", _data);
		message = response.IsSuccessStatusCode ? "Imported" : "Import failed";
		StateHasChanged();
	}
}