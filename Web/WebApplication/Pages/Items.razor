@page "/Items"
@using Newtonsoft.Json
@inject HttpClient _HttpClient;

<h1>Items</h1>

@if (items == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <EditForm Model="@item">
        <div class="form-group">
            <small class="form-text text-muted">
                @(item.ItemId != Guid.Empty ? item.ItemId.ToString() : "")
            </small>
        </div>
        <div class="form-group row">
            <label for="inputName" class="col-sm-2 col-form-label">Name</label>
            <div class="col-sm-10">
                <InputText class="form-control" id="inputName" placeholder="Enter Name" @bind-Value="item.Name"/>
            </div>
        </div>
        <div class="form-group row">
            <label for="inputDescription" class="col-sm-2 col-form-label">Description</label>
            <div class="col-sm-10">
                <InputText class="form-control" id="inputDescription" placeholder="Enter Description" @bind-Value="@(item.Description)"/>
            </div>
        </div>
        <div class="form-group row">
            <label for="inputShelfLife" class="col-sm-2 col-form-label">Shelf Life (days)</label>
            <div class="col-sm-10">
                <InputNumber class="form-control" id="inputShelfLife" placeholder="Enter Shelf life" min="0" @bind-Value="@(item.ShelfLife)"/>
            </div>
        </div>
        <div class="form-group row">
            <label for="inputBuyPrice" class="col-sm-2 col-form-label">Buy Price</label>
            <div class="col-sm-10">
                <InputNumber class="form-control" id="inputBuyPrice" placeholder="Enter Buy Price" min="0" step=".01" @bind-Value="@(item.BuyPrice)"/>
            </div>
        </div>
        <div class="form-group row">
            <label for="inputSellPrice" class="col-sm-2 col-form-label">Sell Price</label>
            <div class="col-sm-10">
                <InputNumber class="form-control" id="inputSellPrice" placeholder="Enter Sell Price" min="0" step=".01"  @bind-Value="@(item.SellPrice)"/>
            </div>
        </div>
        

        @if (item.ItemId != Guid.Empty)
        {
            <button class="btn btn-primary" @onclick="Update">Update</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="Add">Add</button>
        }
            
        <button class="btn btn-primary" @onclick="ClearIndex">Clear</button>
    </EditForm>
    
    <br/>
    @message    
    <br/>
    
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>BuyPrice</th>
            <th>Edit</th>
        </tr>
        </thead>
        <tbody>

        @foreach (var value in items.Select((_item, i) => new {_item, i}))

        {
            <tr>
                <td>@value._item.Name</td>
                <td>@value._item.BuyPrice</td>
                <td>
                    <button @onclick="@(() => {message = ""; item = new Business.Models.Item(value._item);})">Edit</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    private List<Business.Models.Item> items;
    private Business.Models.Item item;
    
    private string message = "";
    
    protected override async Task OnInitializedAsync()
    {
        item = new Business.Models.Item();
        items = await _HttpClient.GetJsonAsync<List<Business.Models.Item>>("https://192.168.0.103:5002/api/Items/List");
    }

    private async Task Add()
    {
        message = "";
        var response = await Utils.PostAsync("api/Items", item);
        
        var json = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            item = JsonConvert.DeserializeObject<Business.Models.Item>(json);
            items.Add(item);    
        }
        else
            message = json;
    }
    
    private async Task Update()
    {
        message = "";
        
        var response = await Utils.PostAsync("api/Items/Update", item);
        
        if (response.IsSuccessStatusCode)
        {
            var index = items.FindIndex(x => x.ItemId == item.ItemId);
            items[index] = item;    
        }
        else 
            message = await response.Content.ReadAsStringAsync();
    }
    
    private void ClearIndex()
    {
        message = "";
        item = new Business.Models.Item();
        StateHasChanged();
    }
}