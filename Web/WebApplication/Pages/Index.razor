@page "/"
@using WebApplication.Components
@inject NavigationManager NavigationManager
@inject Task<string> getURLTask
@attribute [Authorize]

<div>
	Guid to Scan
	<input @bind="CurrentValue" type="text" name="txt" />
	<button class="btn btn-primary"  @onclick="Scan">Buy</button>
</div>

<button class="btn btn-primary" disabled="@(!(items != null && items.Count > 0))" @onclick="Checkout">Checkout</button>
@InvId

<Cart @ref="child" NFC="false" callBack="callback" />

@code
{
	private List<Cart.Item> items = new List<Cart.Item>();

	private Cart child;

	private string CurrentValue;

	public void callback(List<Cart.Item> _items) {
		items = _items;
		StateHasChanged();
	}

	protected override void OnInitialized() {
		//Get the contents of the basket
		var timer = new System.Threading.Timer(
			e => CheckBasket(),
			null,
			TimeSpan.Zero,
			TimeSpan.FromMilliseconds(500));
	}

	private async void CheckBasket() {
		if (items?.Count > 0)
			return;

		var response = await Utils.GetAsync($"{await getURLTask}api/Checkout");
		if (response.IsSuccessStatusCode) {

			var inventory = JsonConvert.DeserializeObject<List<Business.Models.Inventory>>(await response.Content.ReadAsStringAsync());
			if (inventory != null)
				foreach (var inven in inventory)
					for (var i = 0; i < inven.Quantity; i++)
						child.UpdateMessage(inven.ItemId);
					

			StateHasChanged();
		}
	}

	private void Scan() {
		child.UpdateMessage(Guid.Parse(CurrentValue));
	}

	private Guid InvId;

	private async void Checkout() {
		var inventory = new List<Business.Models.Inventory>();

		foreach (var item in items)
			inventory.Add(new Business.Models.Inventory() {
				ItemId = item.ItemId,
				Time = DateTime.Now,
				Quantity = item.Quantity,
				Monies = item.SellPrice,
				Export = true
			});

		var checkoutResponse = await Utils.PostAsync($"{await getURLTask}api/Inventory/List", inventory);
		if (checkoutResponse.IsSuccessStatusCode) {
			InvId = JsonConvert.DeserializeObject<List<Business.Models.Inventory>>(await checkoutResponse.Content.ReadAsStringAsync()).First().InventoryId;
			items = new List<Cart.Item>();

			//Clear the items in the checkout
			await Utils.GetAsync($"{await getURLTask}api/Checkout/Clear");

			StateHasChanged();
			child.Clear();
		}
	}
}