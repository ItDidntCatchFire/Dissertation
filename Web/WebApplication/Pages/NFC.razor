@page "/NFC"
@using System.Net
@using Microsoft.Extensions.Logging
@using Newtonsoft.Json.Linq
@inject IJSRuntime JSRuntime;
<h1>NFC</h1>
@if (!@permission)
{
    <button @onclick="NFCPermission">
        Start Scanning
    </button>    
}


<h1>@Error</h1>
@if (Items == new List<Business.Models.Item>())
{
    <p><em>Please Scan Something</em></p>
}
else
{
    <div class="list-group overflow-auto" style="height: 60vh">
        @foreach (var item in Items)
        {
            <a href="#" class="list-group-item list-group-item-action flex-column align-items-start">
                <div class="d-flex w-100 justify-content-between">
                    <p class="mb-1">@item.Name</p>
                    <small>@item.SellPrice</small>
                    <small>Quantity</small>
                </div>
                
            </a>
        }
    </div>
}


@code {
    private static List<Business.Models.Item> Items = new List<Business.Models.Item>();
    private static Action _action;
    private static HttpClient _httpClient;
    private static string Error;
    private static bool permission;
    
    protected override async void OnInitialized()
    {
        _httpClient = new HttpClient();
        _action = UpdateMessage;
        
        permission = await JSRuntime.InvokeAsync<bool>("NFCScan");

        StateHasChanged();
    }


    private void UpdateMessage()
    {
        StateHasChanged();
    }

    private void NFCPermission()
    {    
        JSRuntime.InvokeVoidAsync("NFCPermission");
    }

    [JSInvokable]
    public static async void UpdateMessageCaller(string param)
    {
        try
        {
            var item = await _httpClient.GetJsonAsync<Business.Models.Item>("https://192.168.0.103:5002/api/Item/0f8fad5b-d9cb-469f-a165-70867728950e");
            Items.Add(item);
        
            _action.Invoke();
        }
        catch (Exception ex)
        {
            
        }
    }
}
